meta {
  name: GET /api/v1/auth/me - Authentication Validation
  type: http
  seq: 11
}

get {
  url: {{baseUrl}}/api/v1/auth/me
  body: none
  auth: bearer
}

auth:bearer {
  token: {{accessToken}}
}

tests {
  test("Status code is 200 for authenticated user", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has user object", function() {
    expect(res.getBody().user).to.be.an('object');
  });
  
  test("User email is present", function() {
    expect(res.getBody().user.email).to.be.a('string');
    expect(res.getBody().user.email).to.have.length.greaterThan(0);
  });
  
  test("User username is present", function() {
    expect(res.getBody().user.username).to.be.a('string');
    expect(res.getBody().user.username).to.have.length.greaterThan(0);
  });
  
  test("User role is present", function() {
    expect(res.getBody().user.role).to.be.oneOf(["OWNER", "ADMIN", "MEMBER", "GUEST"]);
  });
  
  test("User ID is present", function() {
    expect(res.getBody().user.id).to.be.a('string');
    expect(res.getBody().user.id).to.have.length.greaterThan(0);
  });
  
  test("User company is present", function() {
    expect(res.getBody().user.company).to.be.an('object');
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: GET /api/v1/auth/me - No Token
  type: http
  seq: 12
}

get {
  url: {{baseUrl}}/api/v1/auth/me
  body: none
  auth: none
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has error message", function() {
    expect(res.getBody().message).to.be.a('string');
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: GET /api/v1/auth/me - Invalid Token
  type: http
  seq: 13
}

get {
  url: {{baseUrl}}/api/v1/auth/me
  body: none
  auth: bearer
}

auth:bearer {
  token: invalid-token
}

tests {
  test("Status code is 401 for invalid token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has error message", function() {
    expect(res.getBody().message).to.be.a('string');
    expect(res.getBody().message).to.include("Invalid token");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: GET /api/v1/auth/me - Expired Token
  type: http
  seq: 14
}

get {
  url: {{baseUrl}}/api/v1/auth/me
  body: none
  auth: bearer
}

auth:bearer {
  token: {{expiredAccessToken}}
}

tests {
  test("Status code is 401 for expired token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has error message", function() {
    expect(res.getBody().message).to.be.a('string');
    expect(res.getBody().message).to.include("Token expired");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
