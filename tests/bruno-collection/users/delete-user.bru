meta {
  name: DELETE /api/v1/users/{id} - Delete User Permissions
  type: http
  seq: 42
}

delete {
  url: {{baseUrl}}/api/v1/users/{{memberUserId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

tests {
  test("Status code is 204 for successful user deletion", function() {
    expect(res.getStatus()).to.equal(204);
  });
  
  test("Response body is empty", function() {
    expect(res.getBody()).to.be.empty;
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: DELETE /api/v1/users/{id} - Delete Non-existent User
  type: http
  seq: 43
}

delete {
  url: {{baseUrl}}/api/v1/users/00000000-0000-0000-0000-000000000000
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

tests {
  test("Status code is 404 for non-existent user", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("not found");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: DELETE /api/v1/users/{id} - Invalid UUID
  type: http
  seq: 44
}

delete {
  url: {{baseUrl}}/api/v1/users/invalid-uuid
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

tests {
  test("Status code is 400 for invalid UUID", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation error message", function() {
    expect(res.getBody().message).to.include("Invalid UUID");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: DELETE /api/v1/users/{id} - Unauthorized Access (Member)
  type: http
  seq: 45
}

delete {
  url: {{baseUrl}}/api/v1/users/{{adminUserId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

tests {
  test("Status code is 403 for unauthorized access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: DELETE /api/v1/users/{id} - Self Deletion (Denied)
  type: http
  seq: 46
}

delete {
  url: {{baseUrl}}/api/v1/users/{{memberUserId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

tests {
  test("Status code is 403 for self deletion", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: DELETE /api/v1/users/{id} - Delete Owner (Denied)
  type: http
  seq: 47
}

delete {
  url: {{baseUrl}}/api/v1/users/{{ownerUserId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

tests {
  test("Status code is 403 for owner deletion", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Cannot delete owner");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: DELETE /api/v1/users/{id} - No Token
  type: http
  seq: 48
}

delete {
  url: {{baseUrl}}/api/v1/users/{{memberUserId}}
  body: none
  auth: none
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
