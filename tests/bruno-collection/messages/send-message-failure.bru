meta {
  name: POST /api/v1/messages - Invalid Data
  type: http
  seq: 160
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "",
    "chatroomId": "invalid-uuid",
    "threadId": "invalid-uuid"
  }
}

tests {
  test("Status code is 400 for invalid data", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation errors", function() {
    expect(res.getBody().errors).to.be.an('array');
    expect(res.getBody().errors).to.have.length.greaterThan(0);
  });
  
  test("Content validation error present", function() {
    const errors = res.getBody().errors;
    const contentError = errors.find(error => error.field === 'content');
    expect(contentError).to.exist;
  });
  
  test("ChatroomId validation error present", function() {
    const errors = res.getBody().errors;
    const chatroomError = errors.find(error => error.field === 'chatroomId');
    expect(chatroomError).to.exist;
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/messages - Non-existent Chatroom
  type: http
  seq: 161
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Message to non-existent chatroom",
    "chatroomId": "00000000-0000-0000-0000-000000000000"
  }
}

tests {
  test("Status code is 404 for non-existent chatroom", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("Chatroom not found");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/messages - Non-existent Thread
  type: http
  seq: 162
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Message to non-existent thread",
    "chatroomId": "{{chatroomId}}",
    "threadId": "00000000-0000-0000-0000-000000000000"
  }
}

tests {
  test("Status code is 404 for non-existent thread", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("Thread not found");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/messages - Cross-Company Chatroom
  type: http
  seq: 163
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Message to other company's chatroom",
    "chatroomId": "{{otherCompanyChatroomId}}"
  }
}

tests {
  test("Status code is 404 for cross-company chatroom", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("Chatroom not found");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/messages - Unauthorized Access (Guest)
  type: http
  seq: 164
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{guestAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Message from guest user",
    "chatroomId": "{{chatroomId}}"
  }
}

tests {
  test("Status code is 403 for guest access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}


meta {
  name: POST /api/v1/messages - Invalid Reply Message ID
  type: http
  seq: 165
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Reply to non-existent message",
    "chatroomId": "{{chatroomId}}",
    "replyToId": "00000000-0000-0000-0000-000000000000"
  }
}

tests {
  test("Status code is 404 for invalid reply message", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("Reply message not found");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/messages - No Token
  type: http
  seq: 166
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Unauthorized message",
    "chatroomId": "{{chatroomId}}"
  }
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
