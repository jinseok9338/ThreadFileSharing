meta {
  name: POST /api/v1/auth/login - Rate Limiting Test
  type: http
  seq: 238
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "test@example.com",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 401 for invalid credentials", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error", function() {
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/auth/login - Rate Limiting Test 2
  type: http
  seq: 239
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "test@example.com",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 401 for invalid credentials", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error", function() {
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/auth/login - Rate Limiting Test 3
  type: http
  seq: 240
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "test@example.com",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 401 for invalid credentials", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error", function() {
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/auth/login - Rate Limiting Test 4
  type: http
  seq: 241
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "test@example.com",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 401 for invalid credentials", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error", function() {
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/auth/login - Rate Limiting Test 5
  type: http
  seq: 242
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "test@example.com",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 401 for invalid credentials", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error", function() {
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}


meta {
  name: POST /api/v1/auth/login - Rate Limiting Test 6
  type: http
  seq: 243
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "test@example.com",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 429 for rate limit exceeded", function() {
    expect(res.getStatus()).to.equal(429);
  });
  
  test("Response has rate limit error", function() {
    expect(res.getBody().message).to.include("Too many requests");
  });
  
  test("Response has retry after header", function() {
    expect(res.getHeader("retry-after")).to.be.a('string');
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}
