meta {
  name: POST /api/v1/messages - Send Message Success
  type: http
  seq: 157
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Hello, this is a test message!",
    "chatroomId": "{{chatroomId}}",
    "threadId": "{{threadId}}"
  }
}

tests {
  test("Status code is 201 for successful message sending", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Response has message object", function() {
    expect(res.getBody().message).to.be.an('object');
  });
  
  test("Message content matches request", function() {
    expect(res.getBody().message.content).to.equal("Hello, this is a test message!");
  });
  
  test("Message belongs to specified chatroom", function() {
    expect(res.getBody().message.chatroom.id).to.equal("{{chatroomId}}");
  });
  
  test("Message belongs to specified thread", function() {
    expect(res.getBody().message.thread.id).to.equal("{{threadId}}");
  });
  
  test("Message has sender information", function() {
    expect(res.getBody().message.sender).to.be.an('object');
    expect(res.getBody().message.sender.id).to.equal("{{ownerUserId}}");
  });
  
  test("Message has valid ID", function() {
    expect(res.getBody().message.id).to.be.a('string');
    expect(res.getBody().message.id).to.have.length.greaterThan(0);
  });
  
  test("Message has creation timestamp", function() {
    expect(res.getBody().message.createdAt).to.be.a('string');
    expect(res.getBody().message.updatedAt).to.be.a('string');
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/messages - Send Message to Chatroom Only
  type: http
  seq: 158
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "Message sent to chatroom without thread",
    "chatroomId": "{{chatroomId}}"
  }
}

tests {
  test("Status code is 201 for chatroom-only message", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Response has message object", function() {
    expect(res.getBody().message).to.be.an('object');
  });
  
  test("Message belongs to chatroom", function() {
    expect(res.getBody().message.chatroom.id).to.equal("{{chatroomId}}");
  });
  
  test("Message has no thread association", function() {
    expect(res.getBody().message.thread).to.be.null;
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/messages - Send Reply Message
  type: http
  seq: 159
}

post {
  url: {{baseUrl}}/api/v1/messages
  body: json
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "content": "This is a reply to the previous message",
    "chatroomId": "{{chatroomId}}",
    "threadId": "{{threadId}}",
    "replyToId": "{{previousMessageId}}"
  }
}

tests {
  test("Status code is 201 for reply message", function() {
    expect(res.getStatus()).to.equal(201);
  });
  
  test("Response has message object", function() {
    expect(res.getBody().message).to.be.an('object');
  });
  
  test("Message has reply information", function() {
    expect(res.getBody().message.replyTo).to.be.an('object');
    expect(res.getBody().message.replyTo.id).to.equal("{{previousMessageId}}");
  });
  
  test("Reply has sender information", function() {
    expect(res.getBody().message.replyTo.senderName).to.be.a('string');
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}
