meta {
  name: GET /api/v1/messages/chatroom/{id} - Get Chatroom Messages (Owner)
  type: http
  seq: 167
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

query:params {
  page: 1
  limit: 10
}

tests {
  test("Status code is 200 for owner access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has messages array", function() {
    expect(res.getBody().messages).to.be.an('array');
  });
  
  test("Response has pagination info", function() {
    expect(res.getBody().pagination).to.be.an('object');
  });
  
  test("Pagination has correct structure", function() {
    expect(res.getBody().pagination.page).to.be.a('number');
    expect(res.getBody().pagination.limit).to.be.a('number');
    expect(res.getBody().pagination.total).to.be.a('number');
    expect(res.getBody().pagination.totalPages).to.be.a('number');
  });
  
  test("Each message has required fields", function() {
    const messages = res.getBody().messages;
    if (messages.length > 0) {
      const message = messages[0];
      expect(message.id).to.be.a('string');
      expect(message.content).to.be.a('string');
      expect(message.sender).to.be.an('object');
      expect(message.createdAt).to.be.a('string');
      expect(message.updatedAt).to.be.a('string');
    }
  });
  
  test("All messages belong to specified chatroom", function() {
    const messages = res.getBody().messages;
    messages.forEach(message => {
      expect(message.chatroom.id).to.equal("{{chatroomId}}");
    });
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Get Chatroom Messages (Admin)
  type: http
  seq: 168
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

query:params {
  page: 1
  limit: 5
}

tests {
  test("Status code is 200 for admin access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has messages array", function() {
    expect(res.getBody().messages).to.be.an('array');
  });
  
  test("Response has pagination info", function() {
    expect(res.getBody().pagination).to.be.an('object');
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Get Chatroom Messages (Member)
  type: http
  seq: 169
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

query:params {
  page: 1
  limit: 3
}

tests {
  test("Status code is 200 for member access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has messages array", function() {
    expect(res.getBody().messages).to.be.an('array');
  });
  
  test("Limited results for member access", function() {
    expect(res.getBody().messages.length).to.be.lessThanOrEqual(3);
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Get Chatroom Messages (Guest)
  type: http
  seq: 170
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{guestAccessToken}}
}

query:params {
  page: 1
  limit: 2
}

tests {
  test("Status code is 200 for guest access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has messages array", function() {
    expect(res.getBody().messages).to.be.an('array');
  });
  
  test("Limited results for guest access", function() {
    expect(res.getBody().messages.length).to.be.lessThanOrEqual(2);
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Filter by Sender
  type: http
  seq: 171
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

query:params {
  page: 1
  limit: 10
  senderId: {{ownerUserId}}
}

tests {
  test("Status code is 200 for sender filter", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has messages array", function() {
    expect(res.getBody().messages).to.be.an('array');
  });
  
  test("All returned messages have specified sender", function() {
    const messages = res.getBody().messages;
    messages.forEach(message => {
      expect(message.sender.id).to.equal("{{ownerUserId}}");
    });
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Search Messages
  type: http
  seq: 172
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

query:params {
  page: 1
  limit: 10
  search: test
}

tests {
  test("Status code is 200 for message search", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has messages array", function() {
    expect(res.getBody().messages).to.be.an('array');
  });
  
  test("All returned messages match search term", function() {
    const messages = res.getBody().messages;
    messages.forEach(message => {
      expect(message.content.toLowerCase()).to.include("test");
    });
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Non-existent Chatroom
  type: http
  seq: 173
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/00000000-0000-0000-0000-000000000000
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

tests {
  test("Status code is 404 for non-existent chatroom", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("Chatroom not found");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - Invalid UUID
  type: http
  seq: 174
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/invalid-uuid
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

tests {
  test("Status code is 400 for invalid UUID", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation error message", function() {
    expect(res.getBody().message).to.include("Invalid UUID");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: GET /api/v1/messages/chatroom/{id} - No Token
  type: http
  seq: 175
}

get {
  url: {{baseUrl}}/api/v1/messages/chatroom/{{chatroomId}}
  body: none
  auth: none
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
