meta {
  name: GET /api/v1/companies/me/members - Member List Access (Owner)
  type: http
  seq: 60
}

get {
  url: {{baseUrl}}/api/v1/companies/me/members
  body: none
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

query:params {
  page: 1
  limit: 10
}

tests {
  test("Status code is 200 for owner access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has members array", function() {
    expect(res.getBody().members).to.be.an('array');
  });
  
  test("Response has pagination info", function() {
    expect(res.getBody().pagination).to.be.an('object');
  });
  
  test("Pagination has correct structure", function() {
    expect(res.getBody().pagination.page).to.be.a('number');
    expect(res.getBody().pagination.limit).to.be.a('number');
    expect(res.getBody().pagination.total).to.be.a('number');
    expect(res.getBody().pagination.totalPages).to.be.a('number');
  });
  
  test("Each member has required fields", function() {
    const members = res.getBody().members;
    if (members.length > 0) {
      const member = members[0];
      expect(member.id).to.be.a('string');
      expect(member.email).to.be.a('string');
      expect(member.username).to.be.a('string');
      expect(member.fullName).to.be.a('string');
      expect(member.role).to.be.oneOf(["OWNER", "ADMIN", "MEMBER", "GUEST"]);
      expect(member.isActive).to.be.a('boolean');
      expect(member.joinedAt).to.be.a('string');
    }
  });
  
  test("All members belong to same company", function() {
    const members = res.getBody().members;
    members.forEach(member => {
      expect(member.company.id).to.equal("{{companyId}}");
    });
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/companies/me/members - Member List Access (Admin)
  type: http
  seq: 61
}

get {
  url: {{baseUrl}}/api/v1/companies/me/members
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

query:params {
  page: 1
  limit: 5
}

tests {
  test("Status code is 200 for admin access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has members array", function() {
    expect(res.getBody().members).to.be.an('array');
  });
  
  test("Response has pagination info", function() {
    expect(res.getBody().pagination).to.be.an('object');
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/companies/me/members - Member List Access (Member - Limited)
  type: http
  seq: 62
}

get {
  url: {{baseUrl}}/api/v1/companies/me/members
  body: none
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

query:params {
  page: 1
  limit: 3
}

tests {
  test("Status code is 200 for member access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has members array", function() {
    expect(res.getBody().members).to.be.an('array');
  });
  
  test("Limited results for member access", function() {
    expect(res.getBody().members.length).to.be.lessThanOrEqual(3);
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/companies/me/members - Guest Access (Denied)
  type: http
  seq: 63
}

get {
  url: {{baseUrl}}/api/v1/companies/me/members
  body: none
  auth: bearer
}

auth:bearer {
  token: {{guestAccessToken}}
}

tests {
  test("Status code is 403 for guest access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: GET /api/v1/companies/me/members - No Token
  type: http
  seq: 64
}

get {
  url: {{baseUrl}}/api/v1/companies/me/members
  body: none
  auth: none
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: GET /api/v1/companies/me/members - Filter by Role
  type: http
  seq: 65
}

get {
  url: {{baseUrl}}/api/v1/companies/me/members
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

query:params {
  page: 1
  limit: 10
  role: ADMIN
}

tests {
  test("Status code is 200 for role filter", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has members array", function() {
    expect(res.getBody().members).to.be.an('array');
  });
  
  test("All returned members have ADMIN role", function() {
    const members = res.getBody().members;
    members.forEach(member => {
      expect(member.role).to.equal("ADMIN");
    });
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}
