meta {
  name: GET /api/v1/users - List Users with Permissions
  type: http
  seq: 24
}

get {
  url: {{baseUrl}}/api/v1/users
  body: none
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

query:params {
  page: 1
  limit: 10
}

tests {
  test("Status code is 200 for successful user list", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has users array", function() {
    expect(res.getBody().users).to.be.an('array');
  });
  
  test("Response has pagination info", function() {
    expect(res.getBody().pagination).to.be.an('object');
  });
  
  test("Pagination has correct structure", function() {
    expect(res.getBody().pagination.page).to.be.a('number');
    expect(res.getBody().pagination.limit).to.be.a('number');
    expect(res.getBody().pagination.total).to.be.a('number');
    expect(res.getBody().pagination.totalPages).to.be.a('number');
  });
  
  test("Each user has required fields", function() {
    const users = res.getBody().users;
    if (users.length > 0) {
      const user = users[0];
      expect(user.id).to.be.a('string');
      expect(user.email).to.be.a('string');
      expect(user.username).to.be.a('string');
      expect(user.fullName).to.be.a('string');
      expect(user.role).to.be.oneOf(["OWNER", "ADMIN", "MEMBER", "GUEST"]);
      expect(user.isActive).to.be.a('boolean');
    }
  });
  
  test("All users belong to same company", function() {
    const users = res.getBody().users;
    users.forEach(user => {
      expect(user.company.id).to.equal("{{companyId}}");
    });
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/users - Member Access (Limited)
  type: http
  seq: 25
}

get {
  url: {{baseUrl}}/api/v1/users
  body: none
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

query:params {
  page: 1
  limit: 5
}

tests {
  test("Status code is 200 for member access", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has users array", function() {
    expect(res.getBody().users).to.be.an('array');
  });
  
  test("Limited results for member access", function() {
    expect(res.getBody().users.length).to.be.lessThanOrEqual(5);
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: GET /api/v1/users - Guest Access (Denied)
  type: http
  seq: 26
}

get {
  url: {{baseUrl}}/api/v1/users
  body: none
  auth: bearer
}

auth:bearer {
  token: {{guestAccessToken}}
}

tests {
  test("Status code is 403 for guest access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: GET /api/v1/users - No Token
  type: http
  seq: 27
}

get {
  url: {{baseUrl}}/api/v1/users
  body: none
  auth: none
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
