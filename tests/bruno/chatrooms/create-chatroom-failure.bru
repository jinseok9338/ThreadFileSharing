meta {
  name: POST /api/v1/chatrooms - Invalid Data
  type: http
  seq: 78
}

post {
  url: {{baseUrl}}/api/v1/chatrooms
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "",
    "description": "",
    "isPublic": "invalid_boolean"
  }
}

tests {
  test("Status code is 400 for invalid data", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation errors", function() {
    expect(res.getBody().errors).to.be.an('array');
    expect(res.getBody().errors).to.have.length.greaterThan(0);
  });
  
  test("Name validation error present", function() {
    const errors = res.getBody().errors;
    const nameError = errors.find(error => error.field === 'name');
    expect(nameError).to.exist;
  });
  
  test("Description validation error present", function() {
    const errors = res.getBody().errors;
    const descError = errors.find(error => error.field === 'description');
    expect(descError).to.exist;
  });
  
  test("IsPublic validation error present", function() {
    const errors = res.getBody().errors;
    const publicError = errors.find(error => error.field === 'isPublic');
    expect(publicError).to.exist;
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/chatrooms - Duplicate Name
  type: http
  seq: 79
}

post {
  url: {{baseUrl}}/api/v1/chatrooms
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "{{testChatroomName}}",
    "description": "Duplicate chatroom name",
    "isPublic": true
  }
}

tests {
  test("Status code is 409 for duplicate name", function() {
    expect(res.getStatus()).to.equal(409);
  });
  
  test("Response has conflict error message", function() {
    expect(res.getBody().message).to.include("already exists");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/chatrooms - Unauthorized Access (Guest)
  type: http
  seq: 80
}

post {
  url: {{baseUrl}}/api/v1/chatrooms
  body: json
  auth: bearer
}

auth:bearer {
  token: {{guestAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Guest Chatroom",
    "description": "Chatroom created by guest",
    "isPublic": true
  }
}

tests {
  test("Status code is 403 for guest access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: POST /api/v1/chatrooms - Invalid Member IDs
  type: http
  seq: 81
}

post {
  url: {{baseUrl}}/api/v1/chatrooms
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Chatroom with Invalid Members",
    "description": "Chatroom with invalid member IDs",
    "isPublic": true,
    "memberIds": ["invalid-uuid", "00000000-0000-0000-0000-000000000000"]
  }
}

tests {
  test("Status code is 400 for invalid member IDs", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation errors", function() {
    expect(res.getBody().errors).to.be.an('array');
    expect(res.getBody().errors).to.have.length.greaterThan(0);
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/chatrooms - Cross-Company Member IDs
  type: http
  seq: 82
}

post {
  url: {{baseUrl}}/api/v1/chatrooms
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Chatroom with Cross-Company Members",
    "description": "Chatroom with members from other company",
    "isPublic": true,
    "memberIds": ["{{otherCompanyUserId}}"]
  }
}

tests {
  test("Status code is 400 for cross-company members", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation error", function() {
    expect(res.getBody().message).to.include("Invalid member");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/chatrooms - No Token
  type: http
  seq: 83
}

post {
  url: {{baseUrl}}/api/v1/chatrooms
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Unauthorized Chatroom",
    "description": "Chatroom without token",
    "isPublic": true
  }
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
