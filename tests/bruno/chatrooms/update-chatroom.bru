meta {
  name: PUT /api/v1/chatrooms/{id} - Update Chatroom (Owner)
  type: http
  seq: 99
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/{{chatroomId}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Updated Chatroom Name",
    "description": "Updated chatroom description",
    "isPublic": false
  }
}

tests {
  test("Status code is 200 for owner update", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has updated chatroom object", function() {
    expect(res.getBody().chatroom).to.be.an('object');
  });
  
  test("Chatroom name is updated", function() {
    expect(res.getBody().chatroom.name).to.equal("Updated Chatroom Name");
  });
  
  test("Chatroom description is updated", function() {
    expect(res.getBody().chatroom.description).to.equal("Updated chatroom description");
  });
  
  test("Chatroom is now private", function() {
    expect(res.getBody().chatroom.isPublic).to.equal(false);
  });
  
  test("Chatroom ID remains the same", function() {
    expect(res.getBody().chatroom.id).to.equal("{{chatroomId}}");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: PUT /api/v1/chatrooms/{id} - Update Chatroom (Admin)
  type: http
  seq: 100
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/{{chatroomId}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{adminAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Admin Updated Chatroom",
    "description": "Updated by admin"
  }
}

tests {
  test("Status code is 200 for admin update", function() {
    expect(res.getStatus()).to.equal(200);
  });
  
  test("Response has updated chatroom object", function() {
    expect(res.getBody().chatroom).to.be.an('object');
  });
  
  test("Chatroom name is updated", function() {
    expect(res.getBody().chatroom.name).to.equal("Admin Updated Chatroom");
  });
  
  test("Chatroom description is updated", function() {
    expect(res.getBody().chatroom.description).to.equal("Updated by admin");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: PUT /api/v1/chatrooms/{id} - Invalid Data
  type: http
  seq: 101
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/{{chatroomId}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "",
    "description": "",
    "isPublic": "invalid_boolean"
  }
}

tests {
  test("Status code is 400 for invalid data", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation errors", function() {
    expect(res.getBody().errors).to.be.an('array');
    expect(res.getBody().errors).to.have.length.greaterThan(0);
  });
  
  test("Name validation error present", function() {
    const errors = res.getBody().errors;
    const nameError = errors.find(error => error.field === 'name');
    expect(nameError).to.exist;
  });
  
  test("Description validation error present", function() {
    const errors = res.getBody().errors;
    const descError = errors.find(error => error.field === 'description');
    expect(descError).to.exist;
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: PUT /api/v1/chatrooms/{id} - Non-existent Chatroom
  type: http
  seq: 102
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/00000000-0000-0000-0000-000000000000
  body: json
  auth: bearer
}

auth:bearer {
  token: {{ownerAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Updated Name"
  }
}

tests {
  test("Status code is 404 for non-existent chatroom", function() {
    expect(res.getStatus()).to.equal(404);
  });
  
  test("Response has not found error message", function() {
    expect(res.getBody().message).to.include("not found");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: PUT /api/v1/chatrooms/{id} - Unauthorized Access (Member)
  type: http
  seq: 103
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/{{chatroomId}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{memberAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Member Updated Chatroom"
  }
}

tests {
  test("Status code is 403 for member access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: PUT /api/v1/chatrooms/{id} - Guest Access (Denied)
  type: http
  seq: 104
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/{{chatroomId}}
  body: json
  auth: bearer
}

auth:bearer {
  token: {{guestAccessToken}}
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Guest Updated Chatroom"
  }
}

tests {
  test("Status code is 403 for guest access", function() {
    expect(res.getStatus()).to.equal(403);
  });
  
  test("Response has forbidden error message", function() {
    expect(res.getBody().message).to.include("Forbidden");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}

---

meta {
  name: PUT /api/v1/chatrooms/{id} - No Token
  type: http
  seq: 105
}

put {
  url: {{baseUrl}}/api/v1/chatrooms/{{chatroomId}}
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "name": "Unauthorized Update"
  }
}

tests {
  test("Status code is 401 for no token", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has unauthorized error message", function() {
    expect(res.getBody().message).to.include("Unauthorized");
  });
  
  test("Response time is under 500ms", function() {
    expect(res.getResponseTime()).to.be.lessThan(500);
  });
}
