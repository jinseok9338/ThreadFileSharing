meta {
  name: Login with valid credentials
  type: http
  seq: 3
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

body:json {
  {
    "email": "jinseok9338@gmail.com",
    "password": "Password123!"
  }
}

assert {
  res.status: eq 200
  res.body.data.user.email: eq jinseok9338@gmail.com
  res.body.data.user.companyRole: eq owner
  res.body.data.accessToken: isDefined
  res.body.data.refreshToken: isDefined
}

tests {
  test("Should return user data", function() {
    expect(res.body.data.user).to.be.an("object");
    expect(res.body.data.user.email).to.equal("jinseok9338@gmail.com");
  });
  
  test("Should return JWT tokens", function() {
    expect(res.body.data.accessToken).to.be.a("string");
    expect(res.body.data.refreshToken).to.be.a("string");
  });
  
  test("Should include company info", function() {
    expect(res.body.data.company).to.be.an("object");
    expect(res.body.data.company.slug).to.equal("anchors");
  });
}

script:post-response {
  // Save tokens for subsequent tests
  bru.setEnvVar("accessToken", res.body.data.accessToken);
  bru.setEnvVar("refreshToken", res.body.data.refreshToken);
  bru.setEnvVar("userId", res.body.data.user.id);
  bru.setEnvVar("companyId", res.body.data.company.id);
}

