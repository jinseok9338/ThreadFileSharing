meta {
  name: POST /api/v1/auth/login - Invalid Credentials
  type: http
  seq: 5
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "{{testOwnerEmail}}",
    "password": "wrongpassword"
  }
}

tests {
  test("Status code is 401 for invalid credentials", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has error message", function() {
    expect(res.getBody().message).to.be.a('string');
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/auth/login - Non-existent User
  type: http
  seq: 6
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "nonexistent@example.com",
    "password": "{{testOwnerPassword}}"
  }
}

tests {
  test("Status code is 401 for non-existent user", function() {
    expect(res.getStatus()).to.equal(401);
  });
  
  test("Response has error message", function() {
    expect(res.getBody().message).to.be.a('string');
    expect(res.getBody().message).to.include("Invalid credentials");
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}

---

meta {
  name: POST /api/v1/auth/login - Invalid Format
  type: http
  seq: 7
}

post {
  url: {{baseUrl}}/api/v1/auth/login
  body: json
  auth: none
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "email": "invalid-email",
    "password": ""
  }
}

tests {
  test("Status code is 400 for invalid format", function() {
    expect(res.getStatus()).to.equal(400);
  });
  
  test("Response has validation errors", function() {
    expect(res.getBody().errors).to.be.an('array');
    expect(res.getBody().errors).to.have.length.greaterThan(0);
  });
  
  test("Response time is under 1 second", function() {
    expect(res.getResponseTime()).to.be.lessThan(1000);
  });
}
