meta {
  name: Storage Quota Test
  type: http
  seq: 7
}

get {
  url: {{base_url}}/api/v1/files/storage/quota
  auth: bearer
}

auth:bearer {
  token: {{auth_token}}
}

tests {
  test("Status code is 200", function() {
    expect(res.status).to.equal(200);
  });
  
  test("Response has success status", function() {
    expect(res.body.success).to.be.true;
  });
  
  test("Response contains quota data", function() {
    expect(res.body.data).to.have.property('id');
    expect(res.body.data).to.have.property('companyId');
    expect(res.body.data).to.have.property('storageLimitBytes');
    expect(res.body.data).to.have.property('storageUsedBytes');
    expect(res.body.data).to.have.property('storageAvailableBytes');
    expect(res.body.data).to.have.property('storageUsedPercent');
    expect(res.body.data).to.have.property('fileCount');
    expect(res.body.data).to.have.property('lastCalculatedAt');
  });
  
  test("Storage data has correct types", function() {
    expect(res.body.data.storageLimitBytes).to.be.a('number');
    expect(res.body.data.storageUsedBytes).to.be.a('number');
    expect(res.body.data.storageAvailableBytes).to.be.a('number');
    expect(res.body.data.storageUsedPercent).to.be.a('number');
    expect(res.body.data.fileCount).to.be.a('number');
  });
  
  test("Storage values are valid", function() {
    expect(res.body.data.storageLimitBytes).to.be.at.least(0);
    expect(res.body.data.storageUsedBytes).to.be.at.least(0);
    expect(res.body.data.storageUsedPercent).to.be.at.least(0);
    expect(res.body.data.storageUsedPercent).to.be.at.most(100);
    expect(res.body.data.fileCount).to.be.at.least(0);
  });
  
  test("Storage calculations are correct", function() {
    const available = res.body.data.storageAvailableBytes;
    const used = res.body.data.storageUsedBytes;
    const limit = res.body.data.storageLimitBytes;
    expect(available).to.equal(limit - used);
  });
  
  test("Company ID matches user's company", function() {
    expect(res.body.data.companyId).to.be.a('string');
    expect(res.body.data.companyId.length).to.be.greaterThan(0);
  });
  
  test("Last calculated time is recent", function() {
    const lastCalculated = new Date(res.body.data.lastCalculatedAt);
    const now = new Date();
    const diffMinutes = (now - lastCalculated) / (1000 * 60);
    expect(diffMinutes).to.be.at.most(5); // Within last 5 minutes
  });
}

vars:pre-request {
  auth_token: "{{jwt_token}}"
}
