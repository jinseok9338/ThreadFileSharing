openapi: 3.0.3
info:
  title: Thread Management API
  description: API for thread creation, organization, and management within chatrooms
  version: 1.0.0
servers:
  - url: http://localhost:3001/api/v1
    description: Development server

paths:
  /chatrooms/{chatroomId}/threads:
    get:
      summary: Get threads in chatroom
      tags: [Threads]
      security:
        - bearerAuth: []
      parameters:
        - name: chatroomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: lastIndex
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [active, archived, resolved]
        - name: type
          in: query
          schema:
            type: string
            enum: [discussion, file_sharing, announcement, question]
      responses:
        "200":
          description: List of threads
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      summary: Create new thread
      tags: [Threads]
      security:
        - bearerAuth: []
      parameters:
        - name: chatroomId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThreadRequest"
      responses:
        "201":
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /threads/{threadId}:
    get:
      summary: Get thread details
      tags: [Threads]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Thread details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    put:
      summary: Update thread
      tags: [Threads]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateThreadRequest"
      responses:
        "200":
          description: Thread updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      summary: Archive thread
      tags: [Threads]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Thread archived successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /threads/{threadId}/members:
    get:
      summary: Get thread members
      tags: [Thread Members]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of thread members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadMemberListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      summary: Add member to thread
      tags: [Thread Members]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddThreadMemberRequest"
      responses:
        "201":
          description: Member added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadMemberResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /threads/{threadId}/members/{userId}:
    delete:
      summary: Remove member from thread
      tags: [Thread Members]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Member removed successfully
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /threads/{threadId}/messages:
    get:
      summary: Get messages in thread
      tags: [Thread Messages]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: limit
          in: query
          schema:
            type: integer
            default: 50
            maximum: 100
        - name: lastIndex
          in: query
          schema:
            type: string
      responses:
        "200":
          description: List of messages in thread
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageListResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      summary: Send message to thread
      tags: [Thread Messages]
      security:
        - bearerAuth: []
      parameters:
        - name: threadId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendThreadMessageRequest"
      responses:
        "201":
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResponse"
        "400":
          $ref: "#/components/responses/BadRequestError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Thread:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
          nullable: true
        status:
          type: string
          enum: [active, archived, resolved, deleted]
        type:
          type: string
          enum: [discussion, file_sharing, announcement, question]
        settings:
          type: object
          nullable: true
        createdById:
          type: string
          format: uuid
        createdBy:
          $ref: "#/components/schemas/User"
        chatroomId:
          type: string
          format: uuid
        memberCount:
          type: integer
        messageCount:
          type: integer
        lastActivityAt:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        archivedAt:
          type: string
          format: date-time
          nullable: true

    ThreadMember:
      type: object
      properties:
        id:
          type: string
          format: uuid
        role:
          type: string
          enum: [creator, moderator, participant, observer]
        accessType:
          type: string
          enum: [full, read_only]
        user:
          $ref: "#/components/schemas/User"
        joinedAt:
          type: string
          format: date-time

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        fullName:
          type: string
        avatar:
          type: string
          nullable: true

    CreateThreadRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        type:
          type: string
          enum: [discussion, file_sharing, announcement, question]
          default: discussion
        settings:
          type: object
          properties:
            allowFileUploads:
              type: boolean
              default: true
            allowMemberInvites:
              type: boolean
              default: true
            isPrivate:
              type: boolean
              default: false

    UpdateThreadRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        description:
          type: string
          maxLength: 1000
        status:
          type: string
          enum: [active, archived, resolved]
        settings:
          type: object
          properties:
            allowFileUploads:
              type: boolean
            allowMemberInvites:
              type: boolean
            isPrivate:
              type: boolean

    AddThreadMemberRequest:
      type: object
      required: [userId]
      properties:
        userId:
          type: string
          format: uuid
        role:
          type: string
          enum: [moderator, participant, observer]
          default: participant
        accessType:
          type: string
          enum: [full, read_only]
          default: full

    SendThreadMessageRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 4000
        type:
          type: string
          enum: [text, file, system]
          default: text
        metadata:
          type: object
          nullable: true

    ThreadResponse:
      allOf:
        - $ref: "#/components/schemas/Thread"
        - type: object
          properties:
            members:
              type: array
              items:
                $ref: "#/components/schemas/ThreadMember"

    ThreadListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Thread"
        pagination:
          $ref: "#/components/schemas/CursorPagination"

    ThreadMemberResponse:
      allOf:
        - $ref: "#/components/schemas/ThreadMember"

    ThreadMemberListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ThreadMember"
        pagination:
          $ref: "#/components/schemas/CursorPagination"

    MessageResponse:
      $ref: "../message-api.yaml#/components/schemas/MessageResponse"

    MessageListResponse:
      $ref: "../message-api.yaml#/components/schemas/MessageListResponse"

    CursorPagination:
      type: object
      properties:
        hasNext:
          type: boolean
        nextIndex:
          type: string
          nullable: true
        limit:
          type: integer

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        statusCode:
          type: integer
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequestError:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    UnauthorizedError:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    ForbiddenError:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    NotFoundError:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
