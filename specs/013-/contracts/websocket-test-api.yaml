openapi: 3.0.3
info:
  title: WebSocket Test API Contracts
  description: API contracts for WebSocket unit test improvements
  version: 1.0.0
  contact:
    name: ThreadFileSharing Team
    email: team@threadfilesharing.com

servers:
  - url: http://localhost:3001/api/v1
    description: Local development server

paths:
  /auth/register:
    post:
      summary: Register test user
      description: Register a new test user for WebSocket testing
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterUserRequest"
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "400":
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: User already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/login:
    post:
      summary: Login test user
      description: Login existing test user and get JWT tokens
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginUserRequest"
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "401":
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /chatrooms:
    get:
      summary: Get chatrooms
      description: Get list of available chatrooms
      tags:
        - Chatrooms
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Chatrooms retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatroomsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Create chatroom
      description: Create a new chatroom for testing
      tags:
        - Chatrooms
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateChatroomRequest"
      responses:
        "201":
          description: Chatroom created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChatroomResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /threads:
    get:
      summary: Get threads
      description: Get list of available threads
      tags:
        - Threads
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Threads retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadsResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

    post:
      summary: Create thread
      description: Create a new thread for testing
      tags:
        - Threads
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateThreadRequest"
      responses:
        "201":
          description: Thread created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ThreadResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /files/upload/initiate:
    post:
      summary: Initiate file upload
      description: Start a new file upload session for WebSocket testing
      tags:
        - Files
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateUploadRequest"
      responses:
        "201":
          description: Upload session initiated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadSessionResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterUserRequest:
      type: object
      required:
        - email
        - password
        - companyName
      properties:
        email:
          type: string
          format: email
          example: test-user@example.com
        password:
          type: string
          minLength: 8
          example: testpassword123
        companyName:
          type: string
          example: Test Company

    LoginUserRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: test-user@example.com
        password:
          type: string
          example: testpassword123

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    AuthResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          required:
            - accessToken
            - refreshToken
            - user
            - company
          properties:
            accessToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            refreshToken:
              type: string
              example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
            user:
              $ref: "#/components/schemas/User"
            company:
              $ref: "#/components/schemas/Company"

    User:
      type: object
      required:
        - id
        - email
        - fullName
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: test-user@example.com
        fullName:
          type: string
          example: Test User
        avatarUrl:
          type: string
          format: uri
          example: https://example.com/avatar.jpg

    Company:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440001
        name:
          type: string
          example: Test Company

    CreateChatroomRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: Test Chatroom
        description:
          type: string
          example: Test chatroom for WebSocket testing

    ChatroomResponse:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440002
        name:
          type: string
          example: Test Chatroom
        description:
          type: string
          example: Test chatroom for WebSocket testing
        createdAt:
          type: string
          format: date-time

    ChatroomsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          required:
            - items
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/ChatroomResponse"

    CreateThreadRequest:
      type: object
      required:
        - title
        - chatroomId
      properties:
        title:
          type: string
          example: Test Thread
        description:
          type: string
          example: Test thread for WebSocket testing
        chatroomId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440002

    ThreadResponse:
      type: object
      required:
        - id
        - title
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440003
        title:
          type: string
          example: Test Thread
        description:
          type: string
          example: Test thread for WebSocket testing
        chatroomId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440002
        createdAt:
          type: string
          format: date-time

    ThreadsResponse:
      type: object
      required:
        - status
        - data
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          required:
            - items
          properties:
            items:
              type: array
              items:
                $ref: "#/components/schemas/ThreadResponse"

    InitiateUploadRequest:
      type: object
      required:
        - fileName
        - fileSize
        - mimeType
      properties:
        fileName:
          type: string
          example: test-file.txt
        fileSize:
          type: integer
          example: 1024
        mimeType:
          type: string
          example: text/plain

    UploadSessionResponse:
      type: object
      required:
        - sessionId
        - uploadUrl
      properties:
        sessionId:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440004
        uploadUrl:
          type: string
          format: uri
          example: http://localhost:3001/api/v1/files/upload/550e8400-e29b-41d4-a716-446655440004

    ErrorResponse:
      type: object
      required:
        - status
        - error
      properties:
        status:
          type: string
          example: error
        timestamp:
          type: string
          format: date-time
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              example: VALIDATION_ERROR
            message:
              type: string
              example: Invalid request data
            path:
              type: string
              example: /api/v1/auth/register

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Chatrooms
    description: Chatroom management
  - name: Threads
    description: Thread management
  - name: Files
    description: File upload and management
