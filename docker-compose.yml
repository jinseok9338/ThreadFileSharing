version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    container_name: threadfilesharing-postgres
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-threadfilesharing_local}
      POSTGRES_USER: ${DATABASE_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${DATABASE_USERNAME:-postgres} -d ${DATABASE_NAME:-threadfilesharing_local}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - threadfilesharing-network

  backend:
    build:
      context: ./packages/backend
      dockerfile: Dockerfile
      target: development
    container_name: threadfilesharing-backend
    environment:
      NODE_ENV: ${NODE_ENV:-local}
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_USERNAME: ${DATABASE_USERNAME:-postgres}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-dev_password}
      DATABASE_NAME: ${DATABASE_NAME:-threadfilesharing_local}
      PORT: ${PORT:-3001}
    ports:
      - "${PORT:-3001}:${PORT:-3001}"
    volumes:
      - ./packages/backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:${PORT:-3001}/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - threadfilesharing-network
    command: npm run start:dev

  redis:
    image: redis:7-alpine
    container_name: threadfilesharing-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - threadfilesharing-network

  minio:
    image: minio/minio:latest
    container_name: threadfilesharing-minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    ports:
      - "${MINIO_PORT:-9000}:9000" # MinIO API
      - "${MINIO_CONSOLE_PORT:-9001}:9001" # MinIO Console
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - threadfilesharing-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local

networks:
  threadfilesharing-network:
    driver: bridge
