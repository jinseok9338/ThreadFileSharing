# ThreadFileSharing Development Guidelines

Auto-generated from all feature plans. Last updated: 2025-09-28

## Active Technologies
- Node.js 18+, TypeScript 5+ + NestJS 10+, Fastify, TypeORM, PostgreSQL 15+, Docker, Bruno (001-backend-db-postgres)
- TypeScript 5.0+, React 19, NestJS 10 + React Router 7, Socket.io, Tailwind CSS 4, shadcn/ui (007-chat-room)
- PostgreSQL for chat data, file storage for uploads (007-chat-room)
- TypeScript 5.9+, Node.js 18+, NestJS 10+ + AWS SDK v3, MinIO client, Multer, Socket.io, TypeORM (009-s3-minio)
- MinIO (local dev), S3-compatible services (production), PostgreSQL for metadata (009-s3-minio)
- TypeScript 5.x, Node.js 18+ + NestJS, React 18+, Socket.io, TypeORM, PostgreSQL, Redis (010-chatroom-chat-thread)
- PostgreSQL (primary), Redis (sessions/cache), MinIO/S3 (files) (010-chatroom-chat-thread)
- Node.js 20+, TypeScript 5.0+, Bruno API Testing Framework + Bruno, Jest, NestJS Testing utilities, PostgreSQL, Redis (011-api-api)
- PostgreSQL for test data, Redis for session testing, File storage for upload testing (011-api-api)
- JavaScript/Node.js (existing test infrastructure) + Bruno API testing, Jest, existing test helpers (012-)
- N/A (test improvements only) (012-)
- Node.js 18+ with Socket.io-client 4.8+ + socket.io-client, axios, form-data, jsonwebtoken (013-)
- N/A (테스트는 기존 백엔드와 통신) (013-)
- Node.js 18+, TypeScript 5.0+ + NestJS, Socket.io, Jest, Bruno API testing framework (015-websocket-api-tests)
- PostgreSQL (existing), Redis (session management) (015-websocket-api-tests)

## Project Structure
```
backend/
frontend/
tests/
```

## Commands
npm test [ONLY COMMANDS FOR ACTIVE TECHNOLOGIES][ONLY COMMANDS FOR ACTIVE TECHNOLOGIES] npm run lint

## Code Style
Node.js 18+, TypeScript 5+: Follow standard conventions

## Recent Changes
- 015-websocket-api-tests: Added Node.js 18+, TypeScript 5.0+ + NestJS, Socket.io, Jest, Bruno API testing framework
- 013-: Added Node.js 18+ with Socket.io-client 4.8+ + socket.io-client, axios, form-data, jsonwebtoken
- 012-: Added JavaScript/Node.js (existing test infrastructure) + Bruno API testing, Jest, existing test helpers

<!-- MANUAL ADDITIONS START -->
<!-- MANUAL ADDITIONS END -->
